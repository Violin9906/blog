(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{418:function(s,a,t){"use strict";t.r(a);var e=t(7),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("此前一直使用LAMP环境，对nginx没有多少了解。这次初次LNMP环境下搭建laravel开发环境，踩了不少坑，集齐了502，500，404，403，200五种状态码（滑稽），特此记录，供以后查阅。")]),s._v(" "),t("h2",{attrs:{id:"_1-在cloud-studio中建立工作空间"}},[s._v("1.在Cloud Studio中建立"),t("a",{attrs:{href:"https://dev.tencent.com/help/cloud-studio/workspace-introduction",target:"_blank",rel:"noopener noreferrer"}},[s._v("工作空间"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("Cloud Studio是腾讯云提供的基于浏览器的IDE，用户可以基于coding中的项目建立工作空间，相当于一个半临时的服务器。\n为了建立所需的开发环境，在coding中建立项目test(不是必须的)，然后建立工作空间。运行环境选择Default(Ubuntu 16.04)。创建后启动并进入工作空间（示意图）。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20181221131616731.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTIwNDE1,size_16,color_FFFFFF,t_70",alt:"Cloud Studio界面"}})]),s._v(" "),t("h2",{attrs:{id:"_2-安装并配置lnmp环境"}},[s._v("2.安装并配置LNMP环境")]),s._v(" "),t("p",[s._v("首先更新apt：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n")])])]),t("p",[s._v("然后就可以安装nginx了：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" nginx\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" nginx start\n")])])]),t("p",[s._v("此时nginx已经安装好。点击页面最右侧的访问链接，建立一个80端口的临时链接，打开应该可以看到nginx的默认页面了。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("下面安装PHP7.1。最新的laravel需要php7.1及以上版本的支持，同时还需要一些其他的php扩展包（将在下面列出).\n首先添加ppa源，因为ubuntu的apt-get软件源只有php7.0版本")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" apt-add-repository ppa:ondrej/php\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" update\n")])])]),t("p",[s._v("然后安装php7.1和相关扩展")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" php7.1 php7.1-fpm php7.1-mcrypt php7.1-gd php7.1-mbstring php7.1-mysql php7.1-zip php7.1-xml\n")])])]),t("p",[s._v("下面修改nginx的配置文件使其支持php")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/nginx/sites-available/default\n")])])]),t("p",[s._v("修改如下内容")]),s._v(" "),t("div",{staticClass:"language-ini extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[s._v("\tlocation ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("        #")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("        #       # With php7.0-cgi alone:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("        #       fastcgi_pass 127.0.0.1:9000;")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("        #       # With php7.1-fpm:")]),s._v("\n                fastcgi_pass unix:/run/php/php7.1-fpm.sock;\n                fastcgi_split_path_info ^((?U).+\\.php)(/?.+)$;\n                fastcgi_param PATH_INFO $fastcgi_path_info;\n                fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n\n        }\n")])])]),t("p",[s._v("最后三行是为了启用pathinfo的功能\n以及添加默认打开文件index.php")]),s._v(" "),t("div",{staticClass:"language-ini extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("\t\t# Add index.php to the list if you are using PHP")]),s._v("\n   \t\tindex index.php index.html index.htm index.nginx-debian.html;\n")])])]),t("p",[s._v("另外，我们还要修改这里")]),s._v(" "),t("div",{staticClass:"language-ini extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[s._v("        location / {\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("               # First attempt to serve request as file, then")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("               # as directory, then fall back to displaying a 404.")]),s._v("\n               try_files $uri $uri/ /index.php?$query_string;\n       }\n")])])]),t("p",[s._v("这里是按照"),t("a",{attrs:{href:"https://laravel.com/docs/5.7/installation#web-server-configuration",target:"_blank",rel:"noopener noreferrer"}},[s._v("laravel的document要求"),t("OutboundLink")],1),s._v("，否则之后设置route会出404。\n最好再修改一下"),t("code",[s._v("/etc/php/7.1/fpm/php.ini")]),s._v("，把"),t("code",[s._v("display_errors")]),s._v("设置为"),t("code",[s._v("On")]),s._v("，方便以后调试php程序。\n重启服务：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" php7.1-fpm restart\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" nginx restart\n")])])]),t("p",[s._v("现在我们进入"),t("code",[s._v("/var/www/html")]),s._v("建立"),t("code",[s._v("test.php")]),s._v("，输入")]),s._v(" "),t("div",{staticClass:"language-php extra-class"},[t("pre",{pre:!0,attrs:{class:"language-php"}},[t("code",[t("span",{pre:!0,attrs:{class:"token php language-php"}},[t("span",{pre:!0,attrs:{class:"token delimiter important"}},[s._v("<?php")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("phpinfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token delimiter important"}},[s._v("?>")])]),s._v("\n")])])]),t("p",[s._v("再打开访问链接，访问"),t("code",[s._v("test.php")]),s._v("，如果一切正常应该能看到php的信息页了。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("最后安装mySQL，这不是重点，如果有需要再启动服务就好了，先装上。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" mysql-server mysql-client\n")])])]),t("h2",{attrs:{id:"_3-安装composer和laravel"}},[s._v("3.安装composer和laravel")]),s._v(" "),t("p",[s._v("laravel是需要通过composer安装的。为了获得最新版本，我们不通过"),t("code",[s._v("apt-get")]),s._v("安装composer（那个安装出来貌似是"),t("code",[s._v("1.0.0-beta")]),s._v("），而是这样：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -sS https://getcomposer.org/installer "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" php\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" composer.phar /usr/local/bin/composer\n")])])]),t("p",[s._v("可以查看一下版本")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("composer -v\n")])])]),t("p",[s._v("然后我们要安装laravel。由于国内网络环境的问题（严肃脸），我们是几乎没办法访问composer的软件源的，需要使用国内镜像"),t("a",{attrs:{href:"https://pkg.phpcomposer.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Packagist"),t("OutboundLink")],1),s._v(".")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("composer config -g repo.packagist composer https://packagist.phpcomposer.com\n")])])]),t("p",[s._v("然后就可以愉快的安装laravel了～(先装一下unzip，否则会报warning)")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("unzip")]),s._v("\ncomposer global require laravel/installer\n")])])]),t("p",[s._v("这样就安装好了。确认一下刚才没有出现警告或者报错。\n然后我们要让laravel可以直接以命令的形式运行而不是每次都要到"),t("code",[s._v("~/.composer/vendor/bin")]),s._v("下面去找那个"),t("code",[s._v("laravel")]),s._v("程序。首先可能会想到环境变量，然而Cloud Studio的这个终端比较特殊，我们知道环境变量在登出后是会重置的，而Cloud Studio的终端由于网络不稳定或其他一些原因经常悄悄登出，到你用的时候再悄悄登录。如果修改登录时自动运行的脚本，貌似也不行（我也不知道为什么）。总之，环境变量弄起来很麻烦。我采用的办法是把laravel文件软链接到"),t("code",[s._v("/usr/local/bin")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /usr/local/bin\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ln")]),s._v(" -s /home/coding/.composer/vendor/bin/laravel laravel\n")])])]),t("p",[s._v("可以试试在随便什么目录下运行laravel")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~\nlaravel\n")])])]),t("p",[s._v("应该能看到彩色的输出而不是"),t("code",[s._v("command not found")]),s._v("一类的东西")]),s._v(" "),t("h2",{attrs:{id:"_4-建立测试项目"}},[s._v("4.建立测试项目")]),s._v(" "),t("p",[s._v("准备工作已经完成了，可以建立一个项目测试了。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~/workspace\nlaravel new "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v("\n")])])]),t("p",[s._v("如果一切顺利的话，应该能在Cloud Studio左侧的文件树中看到项目文件了。注意！留意终端的输出，不要被最后那行"),t("code",[s._v("Build something amazing")]),s._v("还是什么的骗了！如果发现有不正常的地方，比如fail, error, warning之类的，一定要先解决，免得后续步骤中浪费时间。可以直接把建立的项目目录"),t("code",[s._v("rm -rf")]),s._v("掉，解决了以后再重新建立一个。按照我自己的情况，到这里都没什么问题。\n然后要修改目录权限，否则会报403.关于权限的具体要求可以参看laravel的文档，我这里懒省事直接设置777了")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" -R "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("777")]),s._v(" ~/workspace/test\n")])])]),t("p",[s._v("接下来，我们要设置nginx的网页根目录位置，否则是没办法通过那个访问链接访问项目的。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /etc/nginx/sites-available/default\n")])])]),t("p",[s._v("把"),t("code",[s._v("root /var/www/html;")]),s._v("改成"),t("code",[s._v("root /home/coding/workspace/test/public")]),s._v("，不一定完全一样，总之就是刚刚建立的项目文件夹下面的"),t("code",[s._v("public")]),s._v("目录。\n再次启动80端口的访问链接，如果一切正常，应该能看到Laravel的欢迎页了。这个小清新风格的页面还是很符合我的审美的(^_^)\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20181221141059812.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0OTIwNDE1,size_16,color_FFFFFF,t_70",alt:"Laravel欢迎页"}})]),s._v(" "),t("ul",[t("li",[s._v("如果出现502错误，首先重启"),t("code",[s._v("php7.1-fpm")]),s._v("和"),t("code",[s._v("nginx")]),s._v("两个服务，因为Cloud Studio很会抽风，你一段时间不动它它就悄悄重启了。")])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" php7.1-fpm restart\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" nginx restart\n")])])]),t("p",[s._v("如果还是不行，检查第2步中LNMP环境的配置是否有问题。")]),s._v(" "),t("ul",[t("li",[s._v("如果出现500错误，检查第3步和第4步，尤其是第4步中建立项目时的输出内容，如果有任何的fail/error/warning等一定要解决。")]),s._v(" "),t("li",[s._v("如果出现403错误，那八成是目录权限的问题，实在不行就简单粗暴777吧。如果还不行，检查一下nginx的配置文件里面有没有加入默认打开"),t("code",[s._v("index.php")]),s._v("的配置（我第二次部署的时候就忘掉了）")])]),s._v(" "),t("p",[s._v("到这里如果成功了，就基本没什么问题了。可以到项目文件夹下的"),t("code",[s._v("routes/web.php")]),s._v("添加一个新路由，测试一下路由功能是否正常。")]),s._v(" "),t("p",[s._v("Have fun!")])])}),[],!1,null,null,null);a.default=n.exports}}]);